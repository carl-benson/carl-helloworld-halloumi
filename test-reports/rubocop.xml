<?xml version='1.0'?>
<testsuites>
  <testsuite name='rubocop'>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/AmbiguousOperator'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/AmbiguousRegexpLiteral'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/AssignmentInCondition'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/BlockAlignment'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/CircularArgumentReference'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/ConditionPosition'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/Debugger'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/DefEndAlignment'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/DeprecatedClassMethods'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/DuplicateMethods'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/DuplicatedKey'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/EachWithObjectArgument'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/ElseLayout'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/EmptyEnsure'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/EmptyInterpolation'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/EndAlignment'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/EndInMethod'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/EnsureReturn'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/Eval'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/FormatParameterMismatch'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/HandleExceptions'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/InvalidCharacterLiteral'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/LiteralInCondition'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/LiteralInInterpolation'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/Loop'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/NestedMethodDefinition'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/NonLocalExitFromIterator'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/ParenthesesAsGroupedExpression'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/RequireParentheses'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/RescueException'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/ShadowingOuterLocalVariable'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/SpaceBeforeFirstArg'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/StringConversionInInterpolation'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/UnderscorePrefixedVariableName'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/UnneededDisable'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/UnreachableCode'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/UnusedBlockArgument'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/UnusedMethodArgument'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/UselessAccessModifier'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/UselessAssignment'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/UselessComparison'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/UselessElseWithoutRescue'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/UselessSetterCall'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Lint/Void'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Metrics/BlockNesting'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Metrics/ClassLength'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Metrics/ModuleLength'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Metrics/CyclomaticComplexity'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Metrics/AbcSize'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Metrics/LineLength'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Metrics/MethodLength'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Metrics/ParameterLists'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Metrics/PerceivedComplexity'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Performance/CaseWhenSplat'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Performance/Count'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Performance/Detect'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Performance/FixedSize'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Performance/FlatMap'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Performance/ReverseEach'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Performance/Sample'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Performance/Size'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Performance/StringReplacement'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/AccessModifierIndentation'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/AccessorMethodName'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/Alias'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/AlignArray'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/AlignHash'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/AlignParameters'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/AndOr'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/ArrayJoin'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/AsciiComments'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/AsciiIdentifiers'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/Attr'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/AutoResourceCleanup'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/BarePercentLiterals'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/BeginBlock'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/BlockComments'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/BlockEndNewline'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/BlockDelimiters'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/BracesAroundHashParameters'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/CaseEquality'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/CaseIndentation'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/CharacterLiteral'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/ClassAndModuleCamelCase'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/ClassAndModuleChildren'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/ClassCheck'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/ClassMethods'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/ClassVars'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/ClosingParenthesisIndentation'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/CollectionMethods'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/ColonMethodCall'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/CommandLiteral'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/CommentAnnotation'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/CommentIndentation'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/Copyright'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/ConstantName'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/DefWithParentheses'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/DeprecatedHashMethods'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/Documentation'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/DotPosition'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/DoubleNegation'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/EachWithObject'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/ElseAlignment'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/EmptyElse'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/MissingElse'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/EmptyLineBetweenDefs'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/EmptyLines'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/EmptyLinesAroundAccessModifier'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/EmptyLinesAroundBlockBody'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/EmptyLinesAroundClassBody'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/EmptyLinesAroundMethodBody'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/EmptyLinesAroundModuleBody'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/EmptyLiteral'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/Encoding'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/EndBlock'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/EndOfLine'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/EvenOdd'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/ExtraSpacing'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/FileName'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/FirstArrayElementLineBreak'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/FirstHashElementLineBreak'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/FirstMethodArgumentLineBreak'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/FirstMethodParameterLineBreak'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/FirstParameterIndentation'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/FlipFlop'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/For'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/FormatString'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/GlobalVars'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/GuardClause'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/HashSyntax'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/IfUnlessModifier'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/IfWithSemicolon'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/IndentArray'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/IndentHash'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/IndentationConsistency'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/IndentationWidth'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/InfiniteLoop'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/InitialIndentation'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/InlineComment'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/Lambda'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/LambdaCall'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/LeadingCommentSpace'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/LineEndConcatenation'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/MethodCallParentheses'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/MethodCalledOnDoEndBlock'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/MethodDefParentheses'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/MethodName'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/ModuleFunction'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/MultilineBlockChain'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/MultilineBlockLayout'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/MultilineIfThen'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/MultilineOperationIndentation'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/MultilineTernaryOperator'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/MutableConstant'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/NegatedIf'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/NegatedWhile'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/NestedModifier'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/NestedTernaryOperator'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/Next'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/NilComparison'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/NonNilCheck'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/Not'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/NumericLiterals'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/OneLineConditional'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/OpMethod'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/OptionalArguments'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/OptionHash'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/ParallelAssignment'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/ParenthesesAroundCondition'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/PercentLiteralDelimiters'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/PercentQLiterals'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/PerlBackrefs'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/PredicateName'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/Proc'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/RaiseArgs'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/RedundantBegin'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/RedundantException'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/RedundantFreeze'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/RedundantReturn'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/RedundantSelf'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/RegexpLiteral'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/RescueEnsureAlignment'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/RescueModifier'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SelfAssignment'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/Semicolon'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/Send'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SignalException'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SingleLineBlockParams'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SingleLineMethods'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SingleSpaceBeforeFirstArg'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SpaceAfterColon'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SpaceAfterComma'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SpaceAfterControlKeyword'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SpaceAfterMethodName'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SpaceAfterNot'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SpaceAfterSemicolon'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SpaceAroundBlockParameters'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SpaceAroundEqualsInParameterDefault'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SpaceAroundOperators'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SpaceBeforeBlockBraces'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SpaceBeforeComma'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SpaceBeforeComment'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SpaceBeforeModifierKeyword'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SpaceBeforeSemicolon'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SpaceInsideBlockBraces'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SpaceInsideBrackets'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SpaceInsideHashLiteralBraces'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SpaceInsideParens'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SpaceInsideRangeLiteral'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SpaceInsideStringInterpolation'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SpecialGlobalVars'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/StabbyLambdaParentheses'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/StringLiterals'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/StringLiteralsInInterpolation'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/StringMethods'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/StructInheritance'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SymbolArray'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SymbolLiteral'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/SymbolProc'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/Tab'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/TrailingBlankLines'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/TrailingComma'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/TrailingWhitespace'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/TrivialAccessors'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/UnlessElse'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/UnneededCapitalW'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/UnneededPercentQ'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/TrailingUnderscoreVariable'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/VariableInterpolation'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/VariableName'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/WhenThen'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/WhileUntilDo'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/WhileUntilModifier'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Style/WordArray'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Rails/ActionFilter'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Rails/Date'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Rails/DefaultScope'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Rails/Delegate'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Rails/FindBy'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Rails/FindEach'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Rails/HasAndBelongsToMany'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Rails/Output'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Rails/PluralizationGrammar'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Rails/ReadWriteAttribute'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Rails/ScopeArgs'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Rails/TimeZone'/>
    <testcase classname='lib.stacks.main_stack.substacks' name='Rails/Validation'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/AmbiguousOperator'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/AmbiguousRegexpLiteral'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/AssignmentInCondition'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/BlockAlignment'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/CircularArgumentReference'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/ConditionPosition'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/Debugger'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/DefEndAlignment'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/DeprecatedClassMethods'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/DuplicateMethods'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/DuplicatedKey'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/EachWithObjectArgument'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/ElseLayout'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/EmptyEnsure'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/EmptyInterpolation'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/EndAlignment'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/EndInMethod'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/EnsureReturn'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/Eval'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/FormatParameterMismatch'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/HandleExceptions'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/InvalidCharacterLiteral'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/LiteralInCondition'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/LiteralInInterpolation'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/Loop'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/NestedMethodDefinition'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/NonLocalExitFromIterator'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/ParenthesesAsGroupedExpression'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/RequireParentheses'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/RescueException'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/ShadowingOuterLocalVariable'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/SpaceBeforeFirstArg'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/StringConversionInInterpolation'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/UnderscorePrefixedVariableName'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/UnneededDisable'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/UnreachableCode'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/UnusedBlockArgument'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/UnusedMethodArgument'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/UselessAccessModifier'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/UselessAssignment'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/UselessComparison'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/UselessElseWithoutRescue'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/UselessSetterCall'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Lint/Void'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Metrics/BlockNesting'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Metrics/ClassLength'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Metrics/ModuleLength'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Metrics/CyclomaticComplexity'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Metrics/AbcSize'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Metrics/LineLength'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Metrics/MethodLength'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Metrics/ParameterLists'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Metrics/PerceivedComplexity'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Performance/CaseWhenSplat'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Performance/Count'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Performance/Detect'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Performance/FixedSize'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Performance/FlatMap'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Performance/ReverseEach'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Performance/Sample'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Performance/Size'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Performance/StringReplacement'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/AccessModifierIndentation'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/AccessorMethodName'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/Alias'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/AlignArray'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/AlignHash'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/AlignParameters'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/AndOr'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/ArrayJoin'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/AsciiComments'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/AsciiIdentifiers'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/Attr'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/AutoResourceCleanup'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/BarePercentLiterals'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/BeginBlock'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/BlockComments'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/BlockEndNewline'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/BlockDelimiters'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/BracesAroundHashParameters'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/CaseEquality'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/CaseIndentation'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/CharacterLiteral'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/ClassAndModuleCamelCase'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/ClassAndModuleChildren'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/ClassCheck'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/ClassMethods'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/ClassVars'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/ClosingParenthesisIndentation'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/CollectionMethods'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/ColonMethodCall'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/CommandLiteral'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/CommentAnnotation'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/CommentIndentation'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/Copyright'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/ConstantName'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/DefWithParentheses'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/DeprecatedHashMethods'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/Documentation'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/DotPosition'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/DoubleNegation'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/EachWithObject'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/ElseAlignment'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/EmptyElse'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/MissingElse'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/EmptyLineBetweenDefs'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/EmptyLines'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/EmptyLinesAroundAccessModifier'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/EmptyLinesAroundBlockBody'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/EmptyLinesAroundClassBody'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/EmptyLinesAroundMethodBody'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/EmptyLinesAroundModuleBody'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/EmptyLiteral'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/Encoding'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/EndBlock'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/EndOfLine'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/EvenOdd'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/ExtraSpacing'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/FileName'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/FirstArrayElementLineBreak'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/FirstHashElementLineBreak'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/FirstMethodArgumentLineBreak'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/FirstMethodParameterLineBreak'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/FirstParameterIndentation'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/FlipFlop'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/For'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/FormatString'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/GlobalVars'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/GuardClause'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/HashSyntax'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/IfUnlessModifier'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/IfWithSemicolon'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/IndentArray'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/IndentHash'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/IndentationConsistency'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/IndentationWidth'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/InfiniteLoop'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/InitialIndentation'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/InlineComment'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/Lambda'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/LambdaCall'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/LeadingCommentSpace'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/LineEndConcatenation'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/MethodCallParentheses'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/MethodCalledOnDoEndBlock'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/MethodDefParentheses'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/MethodName'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/ModuleFunction'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/MultilineBlockChain'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/MultilineBlockLayout'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/MultilineIfThen'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/MultilineOperationIndentation'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/MultilineTernaryOperator'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/MutableConstant'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/NegatedIf'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/NegatedWhile'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/NestedModifier'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/NestedTernaryOperator'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/Next'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/NilComparison'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/NonNilCheck'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/Not'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/NumericLiterals'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/OneLineConditional'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/OpMethod'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/OptionalArguments'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/OptionHash'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/ParallelAssignment'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/ParenthesesAroundCondition'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/PercentLiteralDelimiters'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/PercentQLiterals'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/PerlBackrefs'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/PredicateName'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/Proc'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/RaiseArgs'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/RedundantBegin'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/RedundantException'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/RedundantFreeze'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/RedundantReturn'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/RedundantSelf'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/RegexpLiteral'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/RescueEnsureAlignment'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/RescueModifier'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SelfAssignment'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/Semicolon'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/Send'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SignalException'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SingleLineBlockParams'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SingleLineMethods'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SingleSpaceBeforeFirstArg'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SpaceAfterColon'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SpaceAfterComma'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SpaceAfterControlKeyword'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SpaceAfterMethodName'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SpaceAfterNot'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SpaceAfterSemicolon'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SpaceAroundBlockParameters'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SpaceAroundEqualsInParameterDefault'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SpaceAroundOperators'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SpaceBeforeBlockBraces'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SpaceBeforeComma'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SpaceBeforeComment'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SpaceBeforeModifierKeyword'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SpaceBeforeSemicolon'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SpaceInsideBlockBraces'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SpaceInsideBrackets'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SpaceInsideHashLiteralBraces'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SpaceInsideParens'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SpaceInsideRangeLiteral'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SpaceInsideStringInterpolation'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SpecialGlobalVars'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/StabbyLambdaParentheses'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/StringLiterals'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/StringLiteralsInInterpolation'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/StringMethods'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/StructInheritance'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SymbolArray'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SymbolLiteral'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/SymbolProc'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/Tab'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/TrailingBlankLines'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/TrailingComma'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/TrailingWhitespace'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/TrivialAccessors'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/UnlessElse'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/UnneededCapitalW'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/UnneededPercentQ'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/TrailingUnderscoreVariable'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/VariableInterpolation'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/VariableName'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/WhenThen'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/WhileUntilDo'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/WhileUntilModifier'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Style/WordArray'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Rails/ActionFilter'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Rails/Date'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Rails/DefaultScope'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Rails/Delegate'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Rails/FindBy'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Rails/FindEach'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Rails/HasAndBelongsToMany'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Rails/Output'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Rails/PluralizationGrammar'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Rails/ReadWriteAttribute'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Rails/ScopeArgs'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Rails/TimeZone'/>
    <testcase classname='lib.stacks.ec2_stack.auto_scaling' name='Rails/Validation'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/AmbiguousOperator'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/AmbiguousRegexpLiteral'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/AssignmentInCondition'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/BlockAlignment'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/CircularArgumentReference'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/ConditionPosition'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/Debugger'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/DefEndAlignment'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/DeprecatedClassMethods'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/DuplicateMethods'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/DuplicatedKey'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/EachWithObjectArgument'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/ElseLayout'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/EmptyEnsure'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/EmptyInterpolation'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/EndAlignment'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/EndInMethod'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/EnsureReturn'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/Eval'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/FormatParameterMismatch'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/HandleExceptions'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/InvalidCharacterLiteral'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/LiteralInCondition'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/LiteralInInterpolation'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/Loop'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/NestedMethodDefinition'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/NonLocalExitFromIterator'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/ParenthesesAsGroupedExpression'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/RequireParentheses'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/RescueException'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/ShadowingOuterLocalVariable'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/SpaceBeforeFirstArg'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/StringConversionInInterpolation'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/UnderscorePrefixedVariableName'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/UnneededDisable'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/UnreachableCode'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/UnusedBlockArgument'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/UnusedMethodArgument'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/UselessAccessModifier'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/UselessAssignment'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/UselessComparison'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/UselessElseWithoutRescue'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/UselessSetterCall'/>
    <testcase classname='lib.stacks.ec2_stack' name='Lint/Void'/>
    <testcase classname='lib.stacks.ec2_stack' name='Metrics/BlockNesting'/>
    <testcase classname='lib.stacks.ec2_stack' name='Metrics/ClassLength'/>
    <testcase classname='lib.stacks.ec2_stack' name='Metrics/ModuleLength'/>
    <testcase classname='lib.stacks.ec2_stack' name='Metrics/CyclomaticComplexity'/>
    <testcase classname='lib.stacks.ec2_stack' name='Metrics/AbcSize'/>
    <testcase classname='lib.stacks.ec2_stack' name='Metrics/LineLength'/>
    <testcase classname='lib.stacks.ec2_stack' name='Metrics/MethodLength'/>
    <testcase classname='lib.stacks.ec2_stack' name='Metrics/ParameterLists'/>
    <testcase classname='lib.stacks.ec2_stack' name='Metrics/PerceivedComplexity'/>
    <testcase classname='lib.stacks.ec2_stack' name='Performance/CaseWhenSplat'/>
    <testcase classname='lib.stacks.ec2_stack' name='Performance/Count'/>
    <testcase classname='lib.stacks.ec2_stack' name='Performance/Detect'/>
    <testcase classname='lib.stacks.ec2_stack' name='Performance/FixedSize'/>
    <testcase classname='lib.stacks.ec2_stack' name='Performance/FlatMap'/>
    <testcase classname='lib.stacks.ec2_stack' name='Performance/ReverseEach'/>
    <testcase classname='lib.stacks.ec2_stack' name='Performance/Sample'/>
    <testcase classname='lib.stacks.ec2_stack' name='Performance/Size'/>
    <testcase classname='lib.stacks.ec2_stack' name='Performance/StringReplacement'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/AccessModifierIndentation'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/AccessorMethodName'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/Alias'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/AlignArray'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/AlignHash'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/AlignParameters'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/AndOr'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/ArrayJoin'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/AsciiComments'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/AsciiIdentifiers'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/Attr'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/AutoResourceCleanup'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/BarePercentLiterals'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/BeginBlock'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/BlockComments'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/BlockEndNewline'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/BlockDelimiters'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/BracesAroundHashParameters'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/CaseEquality'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/CaseIndentation'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/CharacterLiteral'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/ClassAndModuleCamelCase'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/ClassAndModuleChildren'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/ClassCheck'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/ClassMethods'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/ClassVars'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/ClosingParenthesisIndentation'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/CollectionMethods'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/ColonMethodCall'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/CommandLiteral'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/CommentAnnotation'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/CommentIndentation'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/Copyright'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/ConstantName'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/DefWithParentheses'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/DeprecatedHashMethods'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/Documentation'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/DotPosition'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/DoubleNegation'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/EachWithObject'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/ElseAlignment'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/EmptyElse'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/MissingElse'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/EmptyLineBetweenDefs'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/EmptyLines'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/EmptyLinesAroundAccessModifier'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/EmptyLinesAroundBlockBody'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/EmptyLinesAroundClassBody'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/EmptyLinesAroundMethodBody'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/EmptyLinesAroundModuleBody'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/EmptyLiteral'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/Encoding'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/EndBlock'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/EndOfLine'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/EvenOdd'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/ExtraSpacing'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/FileName'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/FirstArrayElementLineBreak'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/FirstHashElementLineBreak'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/FirstMethodArgumentLineBreak'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/FirstMethodParameterLineBreak'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/FirstParameterIndentation'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/FlipFlop'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/For'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/FormatString'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/GlobalVars'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/GuardClause'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/HashSyntax'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/IfUnlessModifier'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/IfWithSemicolon'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/IndentArray'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/IndentHash'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/IndentationConsistency'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/IndentationWidth'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/InfiniteLoop'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/InitialIndentation'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/InlineComment'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/Lambda'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/LambdaCall'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/LeadingCommentSpace'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/LineEndConcatenation'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/MethodCallParentheses'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/MethodCalledOnDoEndBlock'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/MethodDefParentheses'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/MethodName'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/ModuleFunction'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/MultilineBlockChain'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/MultilineBlockLayout'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/MultilineIfThen'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/MultilineOperationIndentation'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/MultilineTernaryOperator'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/MutableConstant'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/NegatedIf'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/NegatedWhile'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/NestedModifier'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/NestedTernaryOperator'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/Next'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/NilComparison'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/NonNilCheck'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/Not'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/NumericLiterals'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/OneLineConditional'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/OpMethod'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/OptionalArguments'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/OptionHash'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/ParallelAssignment'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/ParenthesesAroundCondition'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/PercentLiteralDelimiters'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/PercentQLiterals'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/PerlBackrefs'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/PredicateName'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/Proc'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/RaiseArgs'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/RedundantBegin'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/RedundantException'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/RedundantFreeze'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/RedundantReturn'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/RedundantSelf'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/RegexpLiteral'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/RescueEnsureAlignment'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/RescueModifier'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SelfAssignment'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/Semicolon'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/Send'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SignalException'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SingleLineBlockParams'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SingleLineMethods'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SingleSpaceBeforeFirstArg'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SpaceAfterColon'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SpaceAfterComma'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SpaceAfterControlKeyword'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SpaceAfterMethodName'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SpaceAfterNot'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SpaceAfterSemicolon'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SpaceAroundBlockParameters'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SpaceAroundEqualsInParameterDefault'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SpaceAroundOperators'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SpaceBeforeBlockBraces'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SpaceBeforeComma'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SpaceBeforeComment'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SpaceBeforeModifierKeyword'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SpaceBeforeSemicolon'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SpaceInsideBlockBraces'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SpaceInsideBrackets'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SpaceInsideHashLiteralBraces'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SpaceInsideParens'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SpaceInsideRangeLiteral'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SpaceInsideStringInterpolation'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SpecialGlobalVars'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/StabbyLambdaParentheses'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/StringLiterals'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/StringLiteralsInInterpolation'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/StringMethods'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/StructInheritance'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SymbolArray'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SymbolLiteral'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/SymbolProc'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/Tab'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/TrailingBlankLines'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/TrailingComma'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/TrailingWhitespace'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/TrivialAccessors'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/UnlessElse'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/UnneededCapitalW'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/UnneededPercentQ'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/TrailingUnderscoreVariable'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/VariableInterpolation'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/VariableName'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/WhenThen'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/WhileUntilDo'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/WhileUntilModifier'/>
    <testcase classname='lib.stacks.ec2_stack' name='Style/WordArray'/>
    <testcase classname='lib.stacks.ec2_stack' name='Rails/ActionFilter'/>
    <testcase classname='lib.stacks.ec2_stack' name='Rails/Date'/>
    <testcase classname='lib.stacks.ec2_stack' name='Rails/DefaultScope'/>
    <testcase classname='lib.stacks.ec2_stack' name='Rails/Delegate'/>
    <testcase classname='lib.stacks.ec2_stack' name='Rails/FindBy'/>
    <testcase classname='lib.stacks.ec2_stack' name='Rails/FindEach'/>
    <testcase classname='lib.stacks.ec2_stack' name='Rails/HasAndBelongsToMany'/>
    <testcase classname='lib.stacks.ec2_stack' name='Rails/Output'/>
    <testcase classname='lib.stacks.ec2_stack' name='Rails/PluralizationGrammar'/>
    <testcase classname='lib.stacks.ec2_stack' name='Rails/ReadWriteAttribute'/>
    <testcase classname='lib.stacks.ec2_stack' name='Rails/ScopeArgs'/>
    <testcase classname='lib.stacks.ec2_stack' name='Rails/TimeZone'/>
    <testcase classname='lib.stacks.ec2_stack' name='Rails/Validation'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/AmbiguousOperator'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/AmbiguousRegexpLiteral'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/AssignmentInCondition'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/BlockAlignment'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/CircularArgumentReference'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/ConditionPosition'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/Debugger'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/DefEndAlignment'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/DeprecatedClassMethods'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/DuplicateMethods'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/DuplicatedKey'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/EachWithObjectArgument'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/ElseLayout'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/EmptyEnsure'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/EmptyInterpolation'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/EndAlignment'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/EndInMethod'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/EnsureReturn'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/Eval'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/FormatParameterMismatch'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/HandleExceptions'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/InvalidCharacterLiteral'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/LiteralInCondition'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/LiteralInInterpolation'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/Loop'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/NestedMethodDefinition'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/NonLocalExitFromIterator'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/ParenthesesAsGroupedExpression'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/RequireParentheses'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/RescueException'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/ShadowingOuterLocalVariable'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/SpaceBeforeFirstArg'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/StringConversionInInterpolation'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/UnderscorePrefixedVariableName'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/UnneededDisable'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/UnreachableCode'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/UnusedBlockArgument'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/UnusedMethodArgument'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/UselessAccessModifier'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/UselessAssignment'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/UselessComparison'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/UselessElseWithoutRescue'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/UselessSetterCall'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Lint/Void'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Metrics/BlockNesting'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Metrics/ClassLength'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Metrics/ModuleLength'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Metrics/CyclomaticComplexity'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Metrics/AbcSize'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Metrics/LineLength'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Metrics/MethodLength'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Metrics/ParameterLists'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Metrics/PerceivedComplexity'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Performance/CaseWhenSplat'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Performance/Count'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Performance/Detect'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Performance/FixedSize'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Performance/FlatMap'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Performance/ReverseEach'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Performance/Sample'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Performance/Size'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Performance/StringReplacement'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/AccessModifierIndentation'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/AccessorMethodName'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/Alias'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/AlignArray'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/AlignHash'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/AlignParameters'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/AndOr'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/ArrayJoin'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/AsciiComments'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/AsciiIdentifiers'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/Attr'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/AutoResourceCleanup'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/BarePercentLiterals'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/BeginBlock'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/BlockComments'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/BlockEndNewline'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/BlockDelimiters'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/BracesAroundHashParameters'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/CaseEquality'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/CaseIndentation'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/CharacterLiteral'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/ClassAndModuleCamelCase'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/ClassAndModuleChildren'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/ClassCheck'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/ClassMethods'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/ClassVars'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/ClosingParenthesisIndentation'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/CollectionMethods'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/ColonMethodCall'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/CommandLiteral'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/CommentAnnotation'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/CommentIndentation'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/Copyright'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/ConstantName'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/DefWithParentheses'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/DeprecatedHashMethods'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/Documentation'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/DotPosition'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/DoubleNegation'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/EachWithObject'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/ElseAlignment'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/EmptyElse'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/MissingElse'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/EmptyLineBetweenDefs'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/EmptyLines'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/EmptyLinesAroundAccessModifier'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/EmptyLinesAroundBlockBody'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/EmptyLinesAroundClassBody'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/EmptyLinesAroundMethodBody'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/EmptyLinesAroundModuleBody'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/EmptyLiteral'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/Encoding'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/EndBlock'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/EndOfLine'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/EvenOdd'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/ExtraSpacing'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/FileName'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/FirstArrayElementLineBreak'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/FirstHashElementLineBreak'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/FirstMethodArgumentLineBreak'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/FirstMethodParameterLineBreak'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/FirstParameterIndentation'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/FlipFlop'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/For'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/FormatString'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/GlobalVars'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/GuardClause'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/HashSyntax'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/IfUnlessModifier'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/IfWithSemicolon'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/IndentArray'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/IndentHash'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/IndentationConsistency'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/IndentationWidth'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/InfiniteLoop'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/InitialIndentation'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/InlineComment'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/Lambda'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/LambdaCall'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/LeadingCommentSpace'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/LineEndConcatenation'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/MethodCallParentheses'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/MethodCalledOnDoEndBlock'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/MethodDefParentheses'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/MethodName'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/ModuleFunction'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/MultilineBlockChain'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/MultilineBlockLayout'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/MultilineIfThen'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/MultilineOperationIndentation'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/MultilineTernaryOperator'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/MutableConstant'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/NegatedIf'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/NegatedWhile'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/NestedModifier'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/NestedTernaryOperator'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/Next'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/NilComparison'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/NonNilCheck'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/Not'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/NumericLiterals'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/OneLineConditional'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/OpMethod'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/OptionalArguments'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/OptionHash'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/ParallelAssignment'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/ParenthesesAroundCondition'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/PercentLiteralDelimiters'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/PercentQLiterals'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/PerlBackrefs'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/PredicateName'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/Proc'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/RaiseArgs'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/RedundantBegin'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/RedundantException'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/RedundantFreeze'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/RedundantReturn'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/RedundantSelf'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/RegexpLiteral'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/RescueEnsureAlignment'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/RescueModifier'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SelfAssignment'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/Semicolon'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/Send'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SignalException'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SingleLineBlockParams'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SingleLineMethods'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SingleSpaceBeforeFirstArg'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SpaceAfterColon'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SpaceAfterComma'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SpaceAfterControlKeyword'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SpaceAfterMethodName'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SpaceAfterNot'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SpaceAfterSemicolon'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SpaceAroundBlockParameters'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SpaceAroundEqualsInParameterDefault'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SpaceAroundOperators'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SpaceBeforeBlockBraces'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SpaceBeforeComma'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SpaceBeforeComment'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SpaceBeforeModifierKeyword'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SpaceBeforeSemicolon'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SpaceInsideBlockBraces'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SpaceInsideBrackets'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SpaceInsideHashLiteralBraces'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SpaceInsideParens'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SpaceInsideRangeLiteral'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SpaceInsideStringInterpolation'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SpecialGlobalVars'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/StabbyLambdaParentheses'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/StringLiterals'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/StringLiteralsInInterpolation'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/StringMethods'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/StructInheritance'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SymbolArray'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SymbolLiteral'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/SymbolProc'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/Tab'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/TrailingBlankLines'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/TrailingComma'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/TrailingWhitespace'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/TrivialAccessors'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/UnlessElse'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/UnneededCapitalW'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/UnneededPercentQ'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/TrailingUnderscoreVariable'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/VariableInterpolation'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/VariableName'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/WhenThen'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/WhileUntilDo'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/WhileUntilModifier'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Style/WordArray'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Rails/ActionFilter'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Rails/Date'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Rails/DefaultScope'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Rails/Delegate'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Rails/FindBy'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Rails/FindEach'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Rails/HasAndBelongsToMany'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Rails/Output'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Rails/PluralizationGrammar'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Rails/ReadWriteAttribute'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Rails/ScopeArgs'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Rails/TimeZone'/>
    <testcase classname='lib.stacks.skeleton_stack.vpc' name='Rails/Validation'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/AmbiguousOperator'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/AmbiguousRegexpLiteral'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/AssignmentInCondition'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/BlockAlignment'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/CircularArgumentReference'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/ConditionPosition'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/Debugger'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/DefEndAlignment'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/DeprecatedClassMethods'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/DuplicateMethods'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/DuplicatedKey'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/EachWithObjectArgument'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/ElseLayout'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/EmptyEnsure'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/EmptyInterpolation'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/EndAlignment'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/EndInMethod'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/EnsureReturn'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/Eval'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/FormatParameterMismatch'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/HandleExceptions'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/InvalidCharacterLiteral'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/LiteralInCondition'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/LiteralInInterpolation'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/Loop'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/NestedMethodDefinition'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/NonLocalExitFromIterator'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/ParenthesesAsGroupedExpression'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/RequireParentheses'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/RescueException'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/ShadowingOuterLocalVariable'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/SpaceBeforeFirstArg'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/StringConversionInInterpolation'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/UnderscorePrefixedVariableName'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/UnneededDisable'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/UnreachableCode'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/UnusedBlockArgument'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/UnusedMethodArgument'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/UselessAccessModifier'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/UselessAssignment'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/UselessComparison'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/UselessElseWithoutRescue'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/UselessSetterCall'/>
    <testcase classname='lib.stacks.main_stack' name='Lint/Void'/>
    <testcase classname='lib.stacks.main_stack' name='Metrics/BlockNesting'/>
    <testcase classname='lib.stacks.main_stack' name='Metrics/ClassLength'/>
    <testcase classname='lib.stacks.main_stack' name='Metrics/ModuleLength'/>
    <testcase classname='lib.stacks.main_stack' name='Metrics/CyclomaticComplexity'/>
    <testcase classname='lib.stacks.main_stack' name='Metrics/AbcSize'/>
    <testcase classname='lib.stacks.main_stack' name='Metrics/LineLength'/>
    <testcase classname='lib.stacks.main_stack' name='Metrics/MethodLength'/>
    <testcase classname='lib.stacks.main_stack' name='Metrics/ParameterLists'/>
    <testcase classname='lib.stacks.main_stack' name='Metrics/PerceivedComplexity'/>
    <testcase classname='lib.stacks.main_stack' name='Performance/CaseWhenSplat'/>
    <testcase classname='lib.stacks.main_stack' name='Performance/Count'/>
    <testcase classname='lib.stacks.main_stack' name='Performance/Detect'/>
    <testcase classname='lib.stacks.main_stack' name='Performance/FixedSize'/>
    <testcase classname='lib.stacks.main_stack' name='Performance/FlatMap'/>
    <testcase classname='lib.stacks.main_stack' name='Performance/ReverseEach'/>
    <testcase classname='lib.stacks.main_stack' name='Performance/Sample'/>
    <testcase classname='lib.stacks.main_stack' name='Performance/Size'/>
    <testcase classname='lib.stacks.main_stack' name='Performance/StringReplacement'/>
    <testcase classname='lib.stacks.main_stack' name='Style/AccessModifierIndentation'/>
    <testcase classname='lib.stacks.main_stack' name='Style/AccessorMethodName'/>
    <testcase classname='lib.stacks.main_stack' name='Style/Alias'/>
    <testcase classname='lib.stacks.main_stack' name='Style/AlignArray'/>
    <testcase classname='lib.stacks.main_stack' name='Style/AlignHash'/>
    <testcase classname='lib.stacks.main_stack' name='Style/AlignParameters'/>
    <testcase classname='lib.stacks.main_stack' name='Style/AndOr'/>
    <testcase classname='lib.stacks.main_stack' name='Style/ArrayJoin'/>
    <testcase classname='lib.stacks.main_stack' name='Style/AsciiComments'/>
    <testcase classname='lib.stacks.main_stack' name='Style/AsciiIdentifiers'/>
    <testcase classname='lib.stacks.main_stack' name='Style/Attr'/>
    <testcase classname='lib.stacks.main_stack' name='Style/AutoResourceCleanup'/>
    <testcase classname='lib.stacks.main_stack' name='Style/BarePercentLiterals'/>
    <testcase classname='lib.stacks.main_stack' name='Style/BeginBlock'/>
    <testcase classname='lib.stacks.main_stack' name='Style/BlockComments'/>
    <testcase classname='lib.stacks.main_stack' name='Style/BlockEndNewline'/>
    <testcase classname='lib.stacks.main_stack' name='Style/BlockDelimiters'/>
    <testcase classname='lib.stacks.main_stack' name='Style/BracesAroundHashParameters'/>
    <testcase classname='lib.stacks.main_stack' name='Style/CaseEquality'/>
    <testcase classname='lib.stacks.main_stack' name='Style/CaseIndentation'/>
    <testcase classname='lib.stacks.main_stack' name='Style/CharacterLiteral'/>
    <testcase classname='lib.stacks.main_stack' name='Style/ClassAndModuleCamelCase'/>
    <testcase classname='lib.stacks.main_stack' name='Style/ClassAndModuleChildren'/>
    <testcase classname='lib.stacks.main_stack' name='Style/ClassCheck'/>
    <testcase classname='lib.stacks.main_stack' name='Style/ClassMethods'/>
    <testcase classname='lib.stacks.main_stack' name='Style/ClassVars'/>
    <testcase classname='lib.stacks.main_stack' name='Style/ClosingParenthesisIndentation'/>
    <testcase classname='lib.stacks.main_stack' name='Style/CollectionMethods'/>
    <testcase classname='lib.stacks.main_stack' name='Style/ColonMethodCall'/>
    <testcase classname='lib.stacks.main_stack' name='Style/CommandLiteral'/>
    <testcase classname='lib.stacks.main_stack' name='Style/CommentAnnotation'/>
    <testcase classname='lib.stacks.main_stack' name='Style/CommentIndentation'/>
    <testcase classname='lib.stacks.main_stack' name='Style/Copyright'/>
    <testcase classname='lib.stacks.main_stack' name='Style/ConstantName'/>
    <testcase classname='lib.stacks.main_stack' name='Style/DefWithParentheses'/>
    <testcase classname='lib.stacks.main_stack' name='Style/DeprecatedHashMethods'/>
    <testcase classname='lib.stacks.main_stack' name='Style/Documentation'/>
    <testcase classname='lib.stacks.main_stack' name='Style/DotPosition'/>
    <testcase classname='lib.stacks.main_stack' name='Style/DoubleNegation'/>
    <testcase classname='lib.stacks.main_stack' name='Style/EachWithObject'/>
    <testcase classname='lib.stacks.main_stack' name='Style/ElseAlignment'/>
    <testcase classname='lib.stacks.main_stack' name='Style/EmptyElse'/>
    <testcase classname='lib.stacks.main_stack' name='Style/MissingElse'/>
    <testcase classname='lib.stacks.main_stack' name='Style/EmptyLineBetweenDefs'/>
    <testcase classname='lib.stacks.main_stack' name='Style/EmptyLines'/>
    <testcase classname='lib.stacks.main_stack' name='Style/EmptyLinesAroundAccessModifier'/>
    <testcase classname='lib.stacks.main_stack' name='Style/EmptyLinesAroundBlockBody'/>
    <testcase classname='lib.stacks.main_stack' name='Style/EmptyLinesAroundClassBody'/>
    <testcase classname='lib.stacks.main_stack' name='Style/EmptyLinesAroundMethodBody'/>
    <testcase classname='lib.stacks.main_stack' name='Style/EmptyLinesAroundModuleBody'/>
    <testcase classname='lib.stacks.main_stack' name='Style/EmptyLiteral'/>
    <testcase classname='lib.stacks.main_stack' name='Style/Encoding'/>
    <testcase classname='lib.stacks.main_stack' name='Style/EndBlock'/>
    <testcase classname='lib.stacks.main_stack' name='Style/EndOfLine'/>
    <testcase classname='lib.stacks.main_stack' name='Style/EvenOdd'/>
    <testcase classname='lib.stacks.main_stack' name='Style/ExtraSpacing'/>
    <testcase classname='lib.stacks.main_stack' name='Style/FileName'/>
    <testcase classname='lib.stacks.main_stack' name='Style/FirstArrayElementLineBreak'/>
    <testcase classname='lib.stacks.main_stack' name='Style/FirstHashElementLineBreak'/>
    <testcase classname='lib.stacks.main_stack' name='Style/FirstMethodArgumentLineBreak'/>
    <testcase classname='lib.stacks.main_stack' name='Style/FirstMethodParameterLineBreak'/>
    <testcase classname='lib.stacks.main_stack' name='Style/FirstParameterIndentation'/>
    <testcase classname='lib.stacks.main_stack' name='Style/FlipFlop'/>
    <testcase classname='lib.stacks.main_stack' name='Style/For'/>
    <testcase classname='lib.stacks.main_stack' name='Style/FormatString'/>
    <testcase classname='lib.stacks.main_stack' name='Style/GlobalVars'/>
    <testcase classname='lib.stacks.main_stack' name='Style/GuardClause'/>
    <testcase classname='lib.stacks.main_stack' name='Style/HashSyntax'/>
    <testcase classname='lib.stacks.main_stack' name='Style/IfUnlessModifier'/>
    <testcase classname='lib.stacks.main_stack' name='Style/IfWithSemicolon'/>
    <testcase classname='lib.stacks.main_stack' name='Style/IndentArray'/>
    <testcase classname='lib.stacks.main_stack' name='Style/IndentHash'/>
    <testcase classname='lib.stacks.main_stack' name='Style/IndentationConsistency'/>
    <testcase classname='lib.stacks.main_stack' name='Style/IndentationWidth'/>
    <testcase classname='lib.stacks.main_stack' name='Style/InfiniteLoop'/>
    <testcase classname='lib.stacks.main_stack' name='Style/InitialIndentation'/>
    <testcase classname='lib.stacks.main_stack' name='Style/InlineComment'/>
    <testcase classname='lib.stacks.main_stack' name='Style/Lambda'/>
    <testcase classname='lib.stacks.main_stack' name='Style/LambdaCall'/>
    <testcase classname='lib.stacks.main_stack' name='Style/LeadingCommentSpace'/>
    <testcase classname='lib.stacks.main_stack' name='Style/LineEndConcatenation'/>
    <testcase classname='lib.stacks.main_stack' name='Style/MethodCallParentheses'/>
    <testcase classname='lib.stacks.main_stack' name='Style/MethodCalledOnDoEndBlock'/>
    <testcase classname='lib.stacks.main_stack' name='Style/MethodDefParentheses'/>
    <testcase classname='lib.stacks.main_stack' name='Style/MethodName'/>
    <testcase classname='lib.stacks.main_stack' name='Style/ModuleFunction'/>
    <testcase classname='lib.stacks.main_stack' name='Style/MultilineBlockChain'/>
    <testcase classname='lib.stacks.main_stack' name='Style/MultilineBlockLayout'/>
    <testcase classname='lib.stacks.main_stack' name='Style/MultilineIfThen'/>
    <testcase classname='lib.stacks.main_stack' name='Style/MultilineOperationIndentation'/>
    <testcase classname='lib.stacks.main_stack' name='Style/MultilineTernaryOperator'/>
    <testcase classname='lib.stacks.main_stack' name='Style/MutableConstant'/>
    <testcase classname='lib.stacks.main_stack' name='Style/NegatedIf'/>
    <testcase classname='lib.stacks.main_stack' name='Style/NegatedWhile'/>
    <testcase classname='lib.stacks.main_stack' name='Style/NestedModifier'/>
    <testcase classname='lib.stacks.main_stack' name='Style/NestedTernaryOperator'/>
    <testcase classname='lib.stacks.main_stack' name='Style/Next'/>
    <testcase classname='lib.stacks.main_stack' name='Style/NilComparison'/>
    <testcase classname='lib.stacks.main_stack' name='Style/NonNilCheck'/>
    <testcase classname='lib.stacks.main_stack' name='Style/Not'/>
    <testcase classname='lib.stacks.main_stack' name='Style/NumericLiterals'/>
    <testcase classname='lib.stacks.main_stack' name='Style/OneLineConditional'/>
    <testcase classname='lib.stacks.main_stack' name='Style/OpMethod'/>
    <testcase classname='lib.stacks.main_stack' name='Style/OptionalArguments'/>
    <testcase classname='lib.stacks.main_stack' name='Style/OptionHash'/>
    <testcase classname='lib.stacks.main_stack' name='Style/ParallelAssignment'/>
    <testcase classname='lib.stacks.main_stack' name='Style/ParenthesesAroundCondition'/>
    <testcase classname='lib.stacks.main_stack' name='Style/PercentLiteralDelimiters'/>
    <testcase classname='lib.stacks.main_stack' name='Style/PercentQLiterals'/>
    <testcase classname='lib.stacks.main_stack' name='Style/PerlBackrefs'/>
    <testcase classname='lib.stacks.main_stack' name='Style/PredicateName'/>
    <testcase classname='lib.stacks.main_stack' name='Style/Proc'/>
    <testcase classname='lib.stacks.main_stack' name='Style/RaiseArgs'/>
    <testcase classname='lib.stacks.main_stack' name='Style/RedundantBegin'/>
    <testcase classname='lib.stacks.main_stack' name='Style/RedundantException'/>
    <testcase classname='lib.stacks.main_stack' name='Style/RedundantFreeze'/>
    <testcase classname='lib.stacks.main_stack' name='Style/RedundantReturn'/>
    <testcase classname='lib.stacks.main_stack' name='Style/RedundantSelf'/>
    <testcase classname='lib.stacks.main_stack' name='Style/RegexpLiteral'/>
    <testcase classname='lib.stacks.main_stack' name='Style/RescueEnsureAlignment'/>
    <testcase classname='lib.stacks.main_stack' name='Style/RescueModifier'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SelfAssignment'/>
    <testcase classname='lib.stacks.main_stack' name='Style/Semicolon'/>
    <testcase classname='lib.stacks.main_stack' name='Style/Send'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SignalException'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SingleLineBlockParams'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SingleLineMethods'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SingleSpaceBeforeFirstArg'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SpaceAfterColon'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SpaceAfterComma'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SpaceAfterControlKeyword'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SpaceAfterMethodName'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SpaceAfterNot'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SpaceAfterSemicolon'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SpaceAroundBlockParameters'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SpaceAroundEqualsInParameterDefault'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SpaceAroundOperators'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SpaceBeforeBlockBraces'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SpaceBeforeComma'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SpaceBeforeComment'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SpaceBeforeModifierKeyword'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SpaceBeforeSemicolon'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SpaceInsideBlockBraces'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SpaceInsideBrackets'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SpaceInsideHashLiteralBraces'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SpaceInsideParens'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SpaceInsideRangeLiteral'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SpaceInsideStringInterpolation'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SpecialGlobalVars'/>
    <testcase classname='lib.stacks.main_stack' name='Style/StabbyLambdaParentheses'/>
    <testcase classname='lib.stacks.main_stack' name='Style/StringLiterals'/>
    <testcase classname='lib.stacks.main_stack' name='Style/StringLiteralsInInterpolation'/>
    <testcase classname='lib.stacks.main_stack' name='Style/StringMethods'/>
    <testcase classname='lib.stacks.main_stack' name='Style/StructInheritance'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SymbolArray'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SymbolLiteral'/>
    <testcase classname='lib.stacks.main_stack' name='Style/SymbolProc'/>
    <testcase classname='lib.stacks.main_stack' name='Style/Tab'/>
    <testcase classname='lib.stacks.main_stack' name='Style/TrailingBlankLines'/>
    <testcase classname='lib.stacks.main_stack' name='Style/TrailingComma'/>
    <testcase classname='lib.stacks.main_stack' name='Style/TrailingWhitespace'/>
    <testcase classname='lib.stacks.main_stack' name='Style/TrivialAccessors'/>
    <testcase classname='lib.stacks.main_stack' name='Style/UnlessElse'/>
    <testcase classname='lib.stacks.main_stack' name='Style/UnneededCapitalW'/>
    <testcase classname='lib.stacks.main_stack' name='Style/UnneededPercentQ'/>
    <testcase classname='lib.stacks.main_stack' name='Style/TrailingUnderscoreVariable'/>
    <testcase classname='lib.stacks.main_stack' name='Style/VariableInterpolation'/>
    <testcase classname='lib.stacks.main_stack' name='Style/VariableName'/>
    <testcase classname='lib.stacks.main_stack' name='Style/WhenThen'/>
    <testcase classname='lib.stacks.main_stack' name='Style/WhileUntilDo'/>
    <testcase classname='lib.stacks.main_stack' name='Style/WhileUntilModifier'/>
    <testcase classname='lib.stacks.main_stack' name='Style/WordArray'/>
    <testcase classname='lib.stacks.main_stack' name='Rails/ActionFilter'/>
    <testcase classname='lib.stacks.main_stack' name='Rails/Date'/>
    <testcase classname='lib.stacks.main_stack' name='Rails/DefaultScope'/>
    <testcase classname='lib.stacks.main_stack' name='Rails/Delegate'/>
    <testcase classname='lib.stacks.main_stack' name='Rails/FindBy'/>
    <testcase classname='lib.stacks.main_stack' name='Rails/FindEach'/>
    <testcase classname='lib.stacks.main_stack' name='Rails/HasAndBelongsToMany'/>
    <testcase classname='lib.stacks.main_stack' name='Rails/Output'/>
    <testcase classname='lib.stacks.main_stack' name='Rails/PluralizationGrammar'/>
    <testcase classname='lib.stacks.main_stack' name='Rails/ReadWriteAttribute'/>
    <testcase classname='lib.stacks.main_stack' name='Rails/ScopeArgs'/>
    <testcase classname='lib.stacks.main_stack' name='Rails/TimeZone'/>
    <testcase classname='lib.stacks.main_stack' name='Rails/Validation'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/AmbiguousOperator'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/AmbiguousRegexpLiteral'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/AssignmentInCondition'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/BlockAlignment'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/CircularArgumentReference'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/ConditionPosition'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/Debugger'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/DefEndAlignment'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/DeprecatedClassMethods'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/DuplicateMethods'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/DuplicatedKey'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/EachWithObjectArgument'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/ElseLayout'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/EmptyEnsure'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/EmptyInterpolation'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/EndAlignment'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/EndInMethod'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/EnsureReturn'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/Eval'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/FormatParameterMismatch'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/HandleExceptions'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/InvalidCharacterLiteral'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/LiteralInCondition'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/LiteralInInterpolation'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/Loop'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/NestedMethodDefinition'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/NonLocalExitFromIterator'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/ParenthesesAsGroupedExpression'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/RequireParentheses'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/RescueException'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/ShadowingOuterLocalVariable'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/SpaceBeforeFirstArg'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/StringConversionInInterpolation'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/UnderscorePrefixedVariableName'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/UnneededDisable'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/UnreachableCode'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/UnusedBlockArgument'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/UnusedMethodArgument'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/UselessAccessModifier'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/UselessAssignment'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/UselessComparison'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/UselessElseWithoutRescue'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/UselessSetterCall'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Lint/Void'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Metrics/BlockNesting'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Metrics/ClassLength'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Metrics/ModuleLength'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Metrics/CyclomaticComplexity'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Metrics/AbcSize'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Metrics/LineLength'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Metrics/MethodLength'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Metrics/ParameterLists'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Metrics/PerceivedComplexity'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Performance/CaseWhenSplat'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Performance/Count'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Performance/Detect'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Performance/FixedSize'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Performance/FlatMap'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Performance/ReverseEach'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Performance/Sample'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Performance/Size'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Performance/StringReplacement'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/AccessModifierIndentation'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/AccessorMethodName'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/Alias'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/AlignArray'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/AlignHash'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/AlignParameters'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/AndOr'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/ArrayJoin'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/AsciiComments'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/AsciiIdentifiers'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/Attr'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/AutoResourceCleanup'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/BarePercentLiterals'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/BeginBlock'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/BlockComments'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/BlockEndNewline'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/BlockDelimiters'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/BracesAroundHashParameters'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/CaseEquality'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/CaseIndentation'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/CharacterLiteral'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/ClassAndModuleCamelCase'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/ClassAndModuleChildren'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/ClassCheck'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/ClassMethods'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/ClassVars'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/ClosingParenthesisIndentation'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/CollectionMethods'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/ColonMethodCall'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/CommandLiteral'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/CommentAnnotation'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/CommentIndentation'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/Copyright'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/ConstantName'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/DefWithParentheses'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/DeprecatedHashMethods'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/Documentation'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/DotPosition'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/DoubleNegation'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/EachWithObject'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/ElseAlignment'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/EmptyElse'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/MissingElse'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/EmptyLineBetweenDefs'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/EmptyLines'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/EmptyLinesAroundAccessModifier'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/EmptyLinesAroundBlockBody'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/EmptyLinesAroundClassBody'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/EmptyLinesAroundMethodBody'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/EmptyLinesAroundModuleBody'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/EmptyLiteral'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/Encoding'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/EndBlock'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/EndOfLine'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/EvenOdd'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/ExtraSpacing'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/FileName'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/FirstArrayElementLineBreak'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/FirstHashElementLineBreak'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/FirstMethodArgumentLineBreak'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/FirstMethodParameterLineBreak'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/FirstParameterIndentation'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/FlipFlop'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/For'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/FormatString'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/GlobalVars'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/GuardClause'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/HashSyntax'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/IfUnlessModifier'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/IfWithSemicolon'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/IndentArray'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/IndentHash'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/IndentationConsistency'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/IndentationWidth'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/InfiniteLoop'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/InitialIndentation'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/InlineComment'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/Lambda'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/LambdaCall'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/LeadingCommentSpace'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/LineEndConcatenation'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/MethodCallParentheses'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/MethodCalledOnDoEndBlock'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/MethodDefParentheses'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/MethodName'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/ModuleFunction'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/MultilineBlockChain'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/MultilineBlockLayout'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/MultilineIfThen'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/MultilineOperationIndentation'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/MultilineTernaryOperator'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/MutableConstant'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/NegatedIf'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/NegatedWhile'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/NestedModifier'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/NestedTernaryOperator'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/Next'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/NilComparison'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/NonNilCheck'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/Not'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/NumericLiterals'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/OneLineConditional'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/OpMethod'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/OptionalArguments'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/OptionHash'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/ParallelAssignment'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/ParenthesesAroundCondition'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/PercentLiteralDelimiters'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/PercentQLiterals'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/PerlBackrefs'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/PredicateName'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/Proc'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/RaiseArgs'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/RedundantBegin'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/RedundantException'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/RedundantFreeze'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/RedundantReturn'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/RedundantSelf'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/RegexpLiteral'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/RescueEnsureAlignment'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/RescueModifier'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SelfAssignment'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/Semicolon'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/Send'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SignalException'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SingleLineBlockParams'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SingleLineMethods'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SingleSpaceBeforeFirstArg'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SpaceAfterColon'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SpaceAfterComma'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SpaceAfterControlKeyword'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SpaceAfterMethodName'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SpaceAfterNot'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SpaceAfterSemicolon'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SpaceAroundBlockParameters'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SpaceAroundEqualsInParameterDefault'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SpaceAroundOperators'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SpaceBeforeBlockBraces'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SpaceBeforeComma'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SpaceBeforeComment'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SpaceBeforeModifierKeyword'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SpaceBeforeSemicolon'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SpaceInsideBlockBraces'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SpaceInsideBrackets'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SpaceInsideHashLiteralBraces'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SpaceInsideParens'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SpaceInsideRangeLiteral'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SpaceInsideStringInterpolation'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SpecialGlobalVars'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/StabbyLambdaParentheses'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/StringLiterals'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/StringLiteralsInInterpolation'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/StringMethods'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/StructInheritance'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SymbolArray'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SymbolLiteral'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/SymbolProc'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/Tab'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/TrailingBlankLines'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/TrailingComma'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/TrailingWhitespace'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/TrivialAccessors'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/UnlessElse'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/UnneededCapitalW'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/UnneededPercentQ'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/TrailingUnderscoreVariable'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/VariableInterpolation'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/VariableName'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/WhenThen'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/WhileUntilDo'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/WhileUntilModifier'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Style/WordArray'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Rails/ActionFilter'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Rails/Date'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Rails/DefaultScope'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Rails/Delegate'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Rails/FindBy'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Rails/FindEach'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Rails/HasAndBelongsToMany'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Rails/Output'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Rails/PluralizationGrammar'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Rails/ReadWriteAttribute'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Rails/ScopeArgs'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Rails/TimeZone'/>
    <testcase classname='lib.stacks.skeleton_stack' name='Rails/Validation'/>
    <testcase classname='lib.main' name='Lint/AmbiguousOperator'/>
    <testcase classname='lib.main' name='Lint/AmbiguousRegexpLiteral'/>
    <testcase classname='lib.main' name='Lint/AssignmentInCondition'/>
    <testcase classname='lib.main' name='Lint/BlockAlignment'/>
    <testcase classname='lib.main' name='Lint/CircularArgumentReference'/>
    <testcase classname='lib.main' name='Lint/ConditionPosition'/>
    <testcase classname='lib.main' name='Lint/Debugger'/>
    <testcase classname='lib.main' name='Lint/DefEndAlignment'/>
    <testcase classname='lib.main' name='Lint/DeprecatedClassMethods'/>
    <testcase classname='lib.main' name='Lint/DuplicateMethods'/>
    <testcase classname='lib.main' name='Lint/DuplicatedKey'/>
    <testcase classname='lib.main' name='Lint/EachWithObjectArgument'/>
    <testcase classname='lib.main' name='Lint/ElseLayout'/>
    <testcase classname='lib.main' name='Lint/EmptyEnsure'/>
    <testcase classname='lib.main' name='Lint/EmptyInterpolation'/>
    <testcase classname='lib.main' name='Lint/EndAlignment'/>
    <testcase classname='lib.main' name='Lint/EndInMethod'/>
    <testcase classname='lib.main' name='Lint/EnsureReturn'/>
    <testcase classname='lib.main' name='Lint/Eval'/>
    <testcase classname='lib.main' name='Lint/FormatParameterMismatch'/>
    <testcase classname='lib.main' name='Lint/HandleExceptions'/>
    <testcase classname='lib.main' name='Lint/InvalidCharacterLiteral'/>
    <testcase classname='lib.main' name='Lint/LiteralInCondition'/>
    <testcase classname='lib.main' name='Lint/LiteralInInterpolation'/>
    <testcase classname='lib.main' name='Lint/Loop'/>
    <testcase classname='lib.main' name='Lint/NestedMethodDefinition'/>
    <testcase classname='lib.main' name='Lint/NonLocalExitFromIterator'/>
    <testcase classname='lib.main' name='Lint/ParenthesesAsGroupedExpression'/>
    <testcase classname='lib.main' name='Lint/RequireParentheses'/>
    <testcase classname='lib.main' name='Lint/RescueException'/>
    <testcase classname='lib.main' name='Lint/ShadowingOuterLocalVariable'/>
    <testcase classname='lib.main' name='Lint/SpaceBeforeFirstArg'/>
    <testcase classname='lib.main' name='Lint/StringConversionInInterpolation'/>
    <testcase classname='lib.main' name='Lint/UnderscorePrefixedVariableName'/>
    <testcase classname='lib.main' name='Lint/UnneededDisable'/>
    <testcase classname='lib.main' name='Lint/UnreachableCode'/>
    <testcase classname='lib.main' name='Lint/UnusedBlockArgument'/>
    <testcase classname='lib.main' name='Lint/UnusedMethodArgument'/>
    <testcase classname='lib.main' name='Lint/UselessAccessModifier'/>
    <testcase classname='lib.main' name='Lint/UselessAssignment'/>
    <testcase classname='lib.main' name='Lint/UselessComparison'/>
    <testcase classname='lib.main' name='Lint/UselessElseWithoutRescue'/>
    <testcase classname='lib.main' name='Lint/UselessSetterCall'/>
    <testcase classname='lib.main' name='Lint/Void'/>
    <testcase classname='lib.main' name='Metrics/BlockNesting'/>
    <testcase classname='lib.main' name='Metrics/ClassLength'/>
    <testcase classname='lib.main' name='Metrics/ModuleLength'/>
    <testcase classname='lib.main' name='Metrics/CyclomaticComplexity'/>
    <testcase classname='lib.main' name='Metrics/AbcSize'/>
    <testcase classname='lib.main' name='Metrics/LineLength'/>
    <testcase classname='lib.main' name='Metrics/MethodLength'/>
    <testcase classname='lib.main' name='Metrics/ParameterLists'/>
    <testcase classname='lib.main' name='Metrics/PerceivedComplexity'/>
    <testcase classname='lib.main' name='Performance/CaseWhenSplat'/>
    <testcase classname='lib.main' name='Performance/Count'/>
    <testcase classname='lib.main' name='Performance/Detect'/>
    <testcase classname='lib.main' name='Performance/FixedSize'/>
    <testcase classname='lib.main' name='Performance/FlatMap'/>
    <testcase classname='lib.main' name='Performance/ReverseEach'/>
    <testcase classname='lib.main' name='Performance/Sample'/>
    <testcase classname='lib.main' name='Performance/Size'/>
    <testcase classname='lib.main' name='Performance/StringReplacement'/>
    <testcase classname='lib.main' name='Style/AccessModifierIndentation'/>
    <testcase classname='lib.main' name='Style/AccessorMethodName'/>
    <testcase classname='lib.main' name='Style/Alias'/>
    <testcase classname='lib.main' name='Style/AlignArray'/>
    <testcase classname='lib.main' name='Style/AlignHash'/>
    <testcase classname='lib.main' name='Style/AlignParameters'/>
    <testcase classname='lib.main' name='Style/AndOr'/>
    <testcase classname='lib.main' name='Style/ArrayJoin'/>
    <testcase classname='lib.main' name='Style/AsciiComments'/>
    <testcase classname='lib.main' name='Style/AsciiIdentifiers'/>
    <testcase classname='lib.main' name='Style/Attr'/>
    <testcase classname='lib.main' name='Style/AutoResourceCleanup'/>
    <testcase classname='lib.main' name='Style/BarePercentLiterals'/>
    <testcase classname='lib.main' name='Style/BeginBlock'/>
    <testcase classname='lib.main' name='Style/BlockComments'/>
    <testcase classname='lib.main' name='Style/BlockEndNewline'/>
    <testcase classname='lib.main' name='Style/BlockDelimiters'/>
    <testcase classname='lib.main' name='Style/BracesAroundHashParameters'/>
    <testcase classname='lib.main' name='Style/CaseEquality'/>
    <testcase classname='lib.main' name='Style/CaseIndentation'/>
    <testcase classname='lib.main' name='Style/CharacterLiteral'/>
    <testcase classname='lib.main' name='Style/ClassAndModuleCamelCase'/>
    <testcase classname='lib.main' name='Style/ClassAndModuleChildren'/>
    <testcase classname='lib.main' name='Style/ClassCheck'/>
    <testcase classname='lib.main' name='Style/ClassMethods'/>
    <testcase classname='lib.main' name='Style/ClassVars'/>
    <testcase classname='lib.main' name='Style/ClosingParenthesisIndentation'/>
    <testcase classname='lib.main' name='Style/CollectionMethods'/>
    <testcase classname='lib.main' name='Style/ColonMethodCall'/>
    <testcase classname='lib.main' name='Style/CommandLiteral'/>
    <testcase classname='lib.main' name='Style/CommentAnnotation'/>
    <testcase classname='lib.main' name='Style/CommentIndentation'/>
    <testcase classname='lib.main' name='Style/Copyright'/>
    <testcase classname='lib.main' name='Style/ConstantName'/>
    <testcase classname='lib.main' name='Style/DefWithParentheses'/>
    <testcase classname='lib.main' name='Style/DeprecatedHashMethods'/>
    <testcase classname='lib.main' name='Style/Documentation'/>
    <testcase classname='lib.main' name='Style/DotPosition'/>
    <testcase classname='lib.main' name='Style/DoubleNegation'/>
    <testcase classname='lib.main' name='Style/EachWithObject'/>
    <testcase classname='lib.main' name='Style/ElseAlignment'/>
    <testcase classname='lib.main' name='Style/EmptyElse'/>
    <testcase classname='lib.main' name='Style/MissingElse'/>
    <testcase classname='lib.main' name='Style/EmptyLineBetweenDefs'/>
    <testcase classname='lib.main' name='Style/EmptyLines'/>
    <testcase classname='lib.main' name='Style/EmptyLinesAroundAccessModifier'/>
    <testcase classname='lib.main' name='Style/EmptyLinesAroundBlockBody'/>
    <testcase classname='lib.main' name='Style/EmptyLinesAroundClassBody'/>
    <testcase classname='lib.main' name='Style/EmptyLinesAroundMethodBody'/>
    <testcase classname='lib.main' name='Style/EmptyLinesAroundModuleBody'/>
    <testcase classname='lib.main' name='Style/EmptyLiteral'/>
    <testcase classname='lib.main' name='Style/Encoding'/>
    <testcase classname='lib.main' name='Style/EndBlock'/>
    <testcase classname='lib.main' name='Style/EndOfLine'/>
    <testcase classname='lib.main' name='Style/EvenOdd'/>
    <testcase classname='lib.main' name='Style/ExtraSpacing'/>
    <testcase classname='lib.main' name='Style/FileName'/>
    <testcase classname='lib.main' name='Style/FirstArrayElementLineBreak'/>
    <testcase classname='lib.main' name='Style/FirstHashElementLineBreak'/>
    <testcase classname='lib.main' name='Style/FirstMethodArgumentLineBreak'/>
    <testcase classname='lib.main' name='Style/FirstMethodParameterLineBreak'/>
    <testcase classname='lib.main' name='Style/FirstParameterIndentation'/>
    <testcase classname='lib.main' name='Style/FlipFlop'/>
    <testcase classname='lib.main' name='Style/For'/>
    <testcase classname='lib.main' name='Style/FormatString'/>
    <testcase classname='lib.main' name='Style/GlobalVars'/>
    <testcase classname='lib.main' name='Style/GuardClause'/>
    <testcase classname='lib.main' name='Style/HashSyntax'/>
    <testcase classname='lib.main' name='Style/IfUnlessModifier'/>
    <testcase classname='lib.main' name='Style/IfWithSemicolon'/>
    <testcase classname='lib.main' name='Style/IndentArray'/>
    <testcase classname='lib.main' name='Style/IndentHash'/>
    <testcase classname='lib.main' name='Style/IndentationConsistency'/>
    <testcase classname='lib.main' name='Style/IndentationWidth'/>
    <testcase classname='lib.main' name='Style/InfiniteLoop'/>
    <testcase classname='lib.main' name='Style/InitialIndentation'/>
    <testcase classname='lib.main' name='Style/InlineComment'/>
    <testcase classname='lib.main' name='Style/Lambda'/>
    <testcase classname='lib.main' name='Style/LambdaCall'/>
    <testcase classname='lib.main' name='Style/LeadingCommentSpace'/>
    <testcase classname='lib.main' name='Style/LineEndConcatenation'/>
    <testcase classname='lib.main' name='Style/MethodCallParentheses'/>
    <testcase classname='lib.main' name='Style/MethodCalledOnDoEndBlock'/>
    <testcase classname='lib.main' name='Style/MethodDefParentheses'/>
    <testcase classname='lib.main' name='Style/MethodName'/>
    <testcase classname='lib.main' name='Style/ModuleFunction'/>
    <testcase classname='lib.main' name='Style/MultilineBlockChain'/>
    <testcase classname='lib.main' name='Style/MultilineBlockLayout'/>
    <testcase classname='lib.main' name='Style/MultilineIfThen'/>
    <testcase classname='lib.main' name='Style/MultilineOperationIndentation'/>
    <testcase classname='lib.main' name='Style/MultilineTernaryOperator'/>
    <testcase classname='lib.main' name='Style/MutableConstant'/>
    <testcase classname='lib.main' name='Style/NegatedIf'/>
    <testcase classname='lib.main' name='Style/NegatedWhile'/>
    <testcase classname='lib.main' name='Style/NestedModifier'/>
    <testcase classname='lib.main' name='Style/NestedTernaryOperator'/>
    <testcase classname='lib.main' name='Style/Next'/>
    <testcase classname='lib.main' name='Style/NilComparison'/>
    <testcase classname='lib.main' name='Style/NonNilCheck'/>
    <testcase classname='lib.main' name='Style/Not'/>
    <testcase classname='lib.main' name='Style/NumericLiterals'/>
    <testcase classname='lib.main' name='Style/OneLineConditional'/>
    <testcase classname='lib.main' name='Style/OpMethod'/>
    <testcase classname='lib.main' name='Style/OptionalArguments'/>
    <testcase classname='lib.main' name='Style/OptionHash'/>
    <testcase classname='lib.main' name='Style/ParallelAssignment'/>
    <testcase classname='lib.main' name='Style/ParenthesesAroundCondition'/>
    <testcase classname='lib.main' name='Style/PercentLiteralDelimiters'/>
    <testcase classname='lib.main' name='Style/PercentQLiterals'/>
    <testcase classname='lib.main' name='Style/PerlBackrefs'/>
    <testcase classname='lib.main' name='Style/PredicateName'/>
    <testcase classname='lib.main' name='Style/Proc'/>
    <testcase classname='lib.main' name='Style/RaiseArgs'/>
    <testcase classname='lib.main' name='Style/RedundantBegin'/>
    <testcase classname='lib.main' name='Style/RedundantException'/>
    <testcase classname='lib.main' name='Style/RedundantFreeze'/>
    <testcase classname='lib.main' name='Style/RedundantReturn'/>
    <testcase classname='lib.main' name='Style/RedundantSelf'/>
    <testcase classname='lib.main' name='Style/RegexpLiteral'/>
    <testcase classname='lib.main' name='Style/RescueEnsureAlignment'/>
    <testcase classname='lib.main' name='Style/RescueModifier'/>
    <testcase classname='lib.main' name='Style/SelfAssignment'/>
    <testcase classname='lib.main' name='Style/Semicolon'/>
    <testcase classname='lib.main' name='Style/Send'/>
    <testcase classname='lib.main' name='Style/SignalException'/>
    <testcase classname='lib.main' name='Style/SingleLineBlockParams'/>
    <testcase classname='lib.main' name='Style/SingleLineMethods'/>
    <testcase classname='lib.main' name='Style/SingleSpaceBeforeFirstArg'/>
    <testcase classname='lib.main' name='Style/SpaceAfterColon'/>
    <testcase classname='lib.main' name='Style/SpaceAfterComma'/>
    <testcase classname='lib.main' name='Style/SpaceAfterControlKeyword'/>
    <testcase classname='lib.main' name='Style/SpaceAfterMethodName'/>
    <testcase classname='lib.main' name='Style/SpaceAfterNot'/>
    <testcase classname='lib.main' name='Style/SpaceAfterSemicolon'/>
    <testcase classname='lib.main' name='Style/SpaceAroundBlockParameters'/>
    <testcase classname='lib.main' name='Style/SpaceAroundEqualsInParameterDefault'/>
    <testcase classname='lib.main' name='Style/SpaceAroundOperators'/>
    <testcase classname='lib.main' name='Style/SpaceBeforeBlockBraces'/>
    <testcase classname='lib.main' name='Style/SpaceBeforeComma'/>
    <testcase classname='lib.main' name='Style/SpaceBeforeComment'/>
    <testcase classname='lib.main' name='Style/SpaceBeforeModifierKeyword'/>
    <testcase classname='lib.main' name='Style/SpaceBeforeSemicolon'/>
    <testcase classname='lib.main' name='Style/SpaceInsideBlockBraces'/>
    <testcase classname='lib.main' name='Style/SpaceInsideBrackets'/>
    <testcase classname='lib.main' name='Style/SpaceInsideHashLiteralBraces'/>
    <testcase classname='lib.main' name='Style/SpaceInsideParens'/>
    <testcase classname='lib.main' name='Style/SpaceInsideRangeLiteral'/>
    <testcase classname='lib.main' name='Style/SpaceInsideStringInterpolation'/>
    <testcase classname='lib.main' name='Style/SpecialGlobalVars'/>
    <testcase classname='lib.main' name='Style/StabbyLambdaParentheses'/>
    <testcase classname='lib.main' name='Style/StringLiterals'/>
    <testcase classname='lib.main' name='Style/StringLiteralsInInterpolation'/>
    <testcase classname='lib.main' name='Style/StringMethods'/>
    <testcase classname='lib.main' name='Style/StructInheritance'/>
    <testcase classname='lib.main' name='Style/SymbolArray'/>
    <testcase classname='lib.main' name='Style/SymbolLiteral'/>
    <testcase classname='lib.main' name='Style/SymbolProc'/>
    <testcase classname='lib.main' name='Style/Tab'/>
    <testcase classname='lib.main' name='Style/TrailingBlankLines'/>
    <testcase classname='lib.main' name='Style/TrailingComma'/>
    <testcase classname='lib.main' name='Style/TrailingWhitespace'/>
    <testcase classname='lib.main' name='Style/TrivialAccessors'/>
    <testcase classname='lib.main' name='Style/UnlessElse'/>
    <testcase classname='lib.main' name='Style/UnneededCapitalW'/>
    <testcase classname='lib.main' name='Style/UnneededPercentQ'/>
    <testcase classname='lib.main' name='Style/TrailingUnderscoreVariable'/>
    <testcase classname='lib.main' name='Style/VariableInterpolation'/>
    <testcase classname='lib.main' name='Style/VariableName'/>
    <testcase classname='lib.main' name='Style/WhenThen'/>
    <testcase classname='lib.main' name='Style/WhileUntilDo'/>
    <testcase classname='lib.main' name='Style/WhileUntilModifier'/>
    <testcase classname='lib.main' name='Style/WordArray'/>
    <testcase classname='lib.main' name='Rails/ActionFilter'/>
    <testcase classname='lib.main' name='Rails/Date'/>
    <testcase classname='lib.main' name='Rails/DefaultScope'/>
    <testcase classname='lib.main' name='Rails/Delegate'/>
    <testcase classname='lib.main' name='Rails/FindBy'/>
    <testcase classname='lib.main' name='Rails/FindEach'/>
    <testcase classname='lib.main' name='Rails/HasAndBelongsToMany'/>
    <testcase classname='lib.main' name='Rails/Output'/>
    <testcase classname='lib.main' name='Rails/PluralizationGrammar'/>
    <testcase classname='lib.main' name='Rails/ReadWriteAttribute'/>
    <testcase classname='lib.main' name='Rails/ScopeArgs'/>
    <testcase classname='lib.main' name='Rails/TimeZone'/>
    <testcase classname='lib.main' name='Rails/Validation'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/AmbiguousOperator'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/AmbiguousRegexpLiteral'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/AssignmentInCondition'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/BlockAlignment'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/CircularArgumentReference'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/ConditionPosition'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/Debugger'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/DefEndAlignment'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/DeprecatedClassMethods'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/DuplicateMethods'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/DuplicatedKey'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/EachWithObjectArgument'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/ElseLayout'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/EmptyEnsure'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/EmptyInterpolation'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/EndAlignment'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/EndInMethod'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/EnsureReturn'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/Eval'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/FormatParameterMismatch'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/HandleExceptions'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/InvalidCharacterLiteral'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/LiteralInCondition'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/LiteralInInterpolation'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/Loop'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/NestedMethodDefinition'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/NonLocalExitFromIterator'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/ParenthesesAsGroupedExpression'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/RequireParentheses'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/RescueException'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/ShadowingOuterLocalVariable'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/SpaceBeforeFirstArg'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/StringConversionInInterpolation'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/UnderscorePrefixedVariableName'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/UnneededDisable'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/UnreachableCode'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/UnusedBlockArgument'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/UnusedMethodArgument'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/UselessAccessModifier'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/UselessAssignment'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/UselessComparison'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/UselessElseWithoutRescue'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/UselessSetterCall'/>
    <testcase classname='lib.shared_concerns.resources' name='Lint/Void'/>
    <testcase classname='lib.shared_concerns.resources' name='Metrics/BlockNesting'/>
    <testcase classname='lib.shared_concerns.resources' name='Metrics/ClassLength'/>
    <testcase classname='lib.shared_concerns.resources' name='Metrics/ModuleLength'/>
    <testcase classname='lib.shared_concerns.resources' name='Metrics/CyclomaticComplexity'/>
    <testcase classname='lib.shared_concerns.resources' name='Metrics/AbcSize'/>
    <testcase classname='lib.shared_concerns.resources' name='Metrics/LineLength'/>
    <testcase classname='lib.shared_concerns.resources' name='Metrics/MethodLength'/>
    <testcase classname='lib.shared_concerns.resources' name='Metrics/ParameterLists'/>
    <testcase classname='lib.shared_concerns.resources' name='Metrics/PerceivedComplexity'/>
    <testcase classname='lib.shared_concerns.resources' name='Performance/CaseWhenSplat'/>
    <testcase classname='lib.shared_concerns.resources' name='Performance/Count'/>
    <testcase classname='lib.shared_concerns.resources' name='Performance/Detect'/>
    <testcase classname='lib.shared_concerns.resources' name='Performance/FixedSize'/>
    <testcase classname='lib.shared_concerns.resources' name='Performance/FlatMap'/>
    <testcase classname='lib.shared_concerns.resources' name='Performance/ReverseEach'/>
    <testcase classname='lib.shared_concerns.resources' name='Performance/Sample'/>
    <testcase classname='lib.shared_concerns.resources' name='Performance/Size'/>
    <testcase classname='lib.shared_concerns.resources' name='Performance/StringReplacement'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/AccessModifierIndentation'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/AccessorMethodName'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/Alias'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/AlignArray'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/AlignHash'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/AlignParameters'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/AndOr'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/ArrayJoin'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/AsciiComments'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/AsciiIdentifiers'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/Attr'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/AutoResourceCleanup'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/BarePercentLiterals'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/BeginBlock'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/BlockComments'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/BlockEndNewline'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/BlockDelimiters'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/BracesAroundHashParameters'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/CaseEquality'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/CaseIndentation'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/CharacterLiteral'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/ClassAndModuleCamelCase'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/ClassAndModuleChildren'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/ClassCheck'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/ClassMethods'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/ClassVars'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/ClosingParenthesisIndentation'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/CollectionMethods'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/ColonMethodCall'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/CommandLiteral'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/CommentAnnotation'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/CommentIndentation'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/Copyright'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/ConstantName'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/DefWithParentheses'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/DeprecatedHashMethods'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/Documentation'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/DotPosition'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/DoubleNegation'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/EachWithObject'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/ElseAlignment'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/EmptyElse'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/MissingElse'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/EmptyLineBetweenDefs'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/EmptyLines'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/EmptyLinesAroundAccessModifier'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/EmptyLinesAroundBlockBody'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/EmptyLinesAroundClassBody'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/EmptyLinesAroundMethodBody'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/EmptyLinesAroundModuleBody'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/EmptyLiteral'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/Encoding'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/EndBlock'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/EndOfLine'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/EvenOdd'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/ExtraSpacing'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/FileName'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/FirstArrayElementLineBreak'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/FirstHashElementLineBreak'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/FirstMethodArgumentLineBreak'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/FirstMethodParameterLineBreak'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/FirstParameterIndentation'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/FlipFlop'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/For'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/FormatString'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/GlobalVars'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/GuardClause'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/HashSyntax'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/IfUnlessModifier'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/IfWithSemicolon'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/IndentArray'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/IndentHash'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/IndentationConsistency'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/IndentationWidth'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/InfiniteLoop'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/InitialIndentation'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/InlineComment'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/Lambda'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/LambdaCall'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/LeadingCommentSpace'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/LineEndConcatenation'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/MethodCallParentheses'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/MethodCalledOnDoEndBlock'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/MethodDefParentheses'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/MethodName'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/ModuleFunction'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/MultilineBlockChain'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/MultilineBlockLayout'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/MultilineIfThen'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/MultilineOperationIndentation'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/MultilineTernaryOperator'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/MutableConstant'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/NegatedIf'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/NegatedWhile'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/NestedModifier'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/NestedTernaryOperator'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/Next'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/NilComparison'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/NonNilCheck'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/Not'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/NumericLiterals'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/OneLineConditional'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/OpMethod'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/OptionalArguments'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/OptionHash'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/ParallelAssignment'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/ParenthesesAroundCondition'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/PercentLiteralDelimiters'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/PercentQLiterals'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/PerlBackrefs'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/PredicateName'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/Proc'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/RaiseArgs'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/RedundantBegin'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/RedundantException'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/RedundantFreeze'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/RedundantReturn'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/RedundantSelf'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/RegexpLiteral'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/RescueEnsureAlignment'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/RescueModifier'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SelfAssignment'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/Semicolon'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/Send'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SignalException'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SingleLineBlockParams'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SingleLineMethods'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SingleSpaceBeforeFirstArg'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SpaceAfterColon'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SpaceAfterComma'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SpaceAfterControlKeyword'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SpaceAfterMethodName'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SpaceAfterNot'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SpaceAfterSemicolon'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SpaceAroundBlockParameters'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SpaceAroundEqualsInParameterDefault'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SpaceAroundOperators'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SpaceBeforeBlockBraces'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SpaceBeforeComma'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SpaceBeforeComment'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SpaceBeforeModifierKeyword'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SpaceBeforeSemicolon'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SpaceInsideBlockBraces'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SpaceInsideBrackets'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SpaceInsideHashLiteralBraces'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SpaceInsideParens'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SpaceInsideRangeLiteral'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SpaceInsideStringInterpolation'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SpecialGlobalVars'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/StabbyLambdaParentheses'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/StringLiterals'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/StringLiteralsInInterpolation'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/StringMethods'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/StructInheritance'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SymbolArray'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SymbolLiteral'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/SymbolProc'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/Tab'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/TrailingBlankLines'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/TrailingComma'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/TrailingWhitespace'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/TrivialAccessors'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/UnlessElse'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/UnneededCapitalW'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/UnneededPercentQ'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/TrailingUnderscoreVariable'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/VariableInterpolation'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/VariableName'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/WhenThen'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/WhileUntilDo'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/WhileUntilModifier'/>
    <testcase classname='lib.shared_concerns.resources' name='Style/WordArray'/>
    <testcase classname='lib.shared_concerns.resources' name='Rails/ActionFilter'/>
    <testcase classname='lib.shared_concerns.resources' name='Rails/Date'/>
    <testcase classname='lib.shared_concerns.resources' name='Rails/DefaultScope'/>
    <testcase classname='lib.shared_concerns.resources' name='Rails/Delegate'/>
    <testcase classname='lib.shared_concerns.resources' name='Rails/FindBy'/>
    <testcase classname='lib.shared_concerns.resources' name='Rails/FindEach'/>
    <testcase classname='lib.shared_concerns.resources' name='Rails/HasAndBelongsToMany'/>
    <testcase classname='lib.shared_concerns.resources' name='Rails/Output'/>
    <testcase classname='lib.shared_concerns.resources' name='Rails/PluralizationGrammar'/>
    <testcase classname='lib.shared_concerns.resources' name='Rails/ReadWriteAttribute'/>
    <testcase classname='lib.shared_concerns.resources' name='Rails/ScopeArgs'/>
    <testcase classname='lib.shared_concerns.resources' name='Rails/TimeZone'/>
    <testcase classname='lib.shared_concerns.resources' name='Rails/Validation'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/AmbiguousOperator'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/AmbiguousRegexpLiteral'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/AssignmentInCondition'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/BlockAlignment'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/CircularArgumentReference'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/ConditionPosition'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/Debugger'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/DefEndAlignment'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/DeprecatedClassMethods'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/DuplicateMethods'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/DuplicatedKey'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/EachWithObjectArgument'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/ElseLayout'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/EmptyEnsure'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/EmptyInterpolation'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/EndAlignment'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/EndInMethod'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/EnsureReturn'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/Eval'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/FormatParameterMismatch'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/HandleExceptions'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/InvalidCharacterLiteral'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/LiteralInCondition'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/LiteralInInterpolation'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/Loop'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/NestedMethodDefinition'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/NonLocalExitFromIterator'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/ParenthesesAsGroupedExpression'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/RequireParentheses'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/RescueException'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/ShadowingOuterLocalVariable'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/SpaceBeforeFirstArg'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/StringConversionInInterpolation'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/UnderscorePrefixedVariableName'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/UnneededDisable'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/UnreachableCode'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/UnusedBlockArgument'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/UnusedMethodArgument'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/UselessAccessModifier'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/UselessAssignment'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/UselessComparison'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/UselessElseWithoutRescue'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/UselessSetterCall'/>
    <testcase classname='lib.shared_concerns.methods' name='Lint/Void'/>
    <testcase classname='lib.shared_concerns.methods' name='Metrics/BlockNesting'/>
    <testcase classname='lib.shared_concerns.methods' name='Metrics/ClassLength'/>
    <testcase classname='lib.shared_concerns.methods' name='Metrics/ModuleLength'/>
    <testcase classname='lib.shared_concerns.methods' name='Metrics/CyclomaticComplexity'/>
    <testcase classname='lib.shared_concerns.methods' name='Metrics/AbcSize'/>
    <testcase classname='lib.shared_concerns.methods' name='Metrics/LineLength'/>
    <testcase classname='lib.shared_concerns.methods' name='Metrics/MethodLength'/>
    <testcase classname='lib.shared_concerns.methods' name='Metrics/ParameterLists'/>
    <testcase classname='lib.shared_concerns.methods' name='Metrics/PerceivedComplexity'/>
    <testcase classname='lib.shared_concerns.methods' name='Performance/CaseWhenSplat'/>
    <testcase classname='lib.shared_concerns.methods' name='Performance/Count'/>
    <testcase classname='lib.shared_concerns.methods' name='Performance/Detect'/>
    <testcase classname='lib.shared_concerns.methods' name='Performance/FixedSize'/>
    <testcase classname='lib.shared_concerns.methods' name='Performance/FlatMap'/>
    <testcase classname='lib.shared_concerns.methods' name='Performance/ReverseEach'/>
    <testcase classname='lib.shared_concerns.methods' name='Performance/Sample'/>
    <testcase classname='lib.shared_concerns.methods' name='Performance/Size'/>
    <testcase classname='lib.shared_concerns.methods' name='Performance/StringReplacement'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/AccessModifierIndentation'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/AccessorMethodName'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/Alias'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/AlignArray'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/AlignHash'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/AlignParameters'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/AndOr'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/ArrayJoin'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/AsciiComments'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/AsciiIdentifiers'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/Attr'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/AutoResourceCleanup'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/BarePercentLiterals'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/BeginBlock'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/BlockComments'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/BlockEndNewline'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/BlockDelimiters'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/BracesAroundHashParameters'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/CaseEquality'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/CaseIndentation'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/CharacterLiteral'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/ClassAndModuleCamelCase'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/ClassAndModuleChildren'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/ClassCheck'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/ClassMethods'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/ClassVars'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/ClosingParenthesisIndentation'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/CollectionMethods'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/ColonMethodCall'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/CommandLiteral'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/CommentAnnotation'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/CommentIndentation'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/Copyright'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/ConstantName'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/DefWithParentheses'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/DeprecatedHashMethods'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/Documentation'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/DotPosition'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/DoubleNegation'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/EachWithObject'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/ElseAlignment'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/EmptyElse'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/MissingElse'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/EmptyLineBetweenDefs'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/EmptyLines'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/EmptyLinesAroundAccessModifier'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/EmptyLinesAroundBlockBody'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/EmptyLinesAroundClassBody'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/EmptyLinesAroundMethodBody'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/EmptyLinesAroundModuleBody'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/EmptyLiteral'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/Encoding'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/EndBlock'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/EndOfLine'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/EvenOdd'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/ExtraSpacing'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/FileName'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/FirstArrayElementLineBreak'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/FirstHashElementLineBreak'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/FirstMethodArgumentLineBreak'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/FirstMethodParameterLineBreak'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/FirstParameterIndentation'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/FlipFlop'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/For'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/FormatString'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/GlobalVars'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/GuardClause'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/HashSyntax'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/IfUnlessModifier'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/IfWithSemicolon'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/IndentArray'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/IndentHash'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/IndentationConsistency'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/IndentationWidth'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/InfiniteLoop'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/InitialIndentation'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/InlineComment'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/Lambda'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/LambdaCall'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/LeadingCommentSpace'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/LineEndConcatenation'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/MethodCallParentheses'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/MethodCalledOnDoEndBlock'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/MethodDefParentheses'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/MethodName'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/ModuleFunction'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/MultilineBlockChain'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/MultilineBlockLayout'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/MultilineIfThen'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/MultilineOperationIndentation'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/MultilineTernaryOperator'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/MutableConstant'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/NegatedIf'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/NegatedWhile'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/NestedModifier'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/NestedTernaryOperator'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/Next'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/NilComparison'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/NonNilCheck'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/Not'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/NumericLiterals'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/OneLineConditional'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/OpMethod'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/OptionalArguments'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/OptionHash'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/ParallelAssignment'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/ParenthesesAroundCondition'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/PercentLiteralDelimiters'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/PercentQLiterals'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/PerlBackrefs'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/PredicateName'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/Proc'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/RaiseArgs'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/RedundantBegin'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/RedundantException'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/RedundantFreeze'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/RedundantReturn'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/RedundantSelf'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/RegexpLiteral'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/RescueEnsureAlignment'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/RescueModifier'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SelfAssignment'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/Semicolon'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/Send'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SignalException'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SingleLineBlockParams'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SingleLineMethods'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SingleSpaceBeforeFirstArg'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SpaceAfterColon'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SpaceAfterComma'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SpaceAfterControlKeyword'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SpaceAfterMethodName'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SpaceAfterNot'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SpaceAfterSemicolon'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SpaceAroundBlockParameters'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SpaceAroundEqualsInParameterDefault'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SpaceAroundOperators'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SpaceBeforeBlockBraces'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SpaceBeforeComma'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SpaceBeforeComment'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SpaceBeforeModifierKeyword'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SpaceBeforeSemicolon'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SpaceInsideBlockBraces'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SpaceInsideBrackets'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SpaceInsideHashLiteralBraces'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SpaceInsideParens'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SpaceInsideRangeLiteral'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SpaceInsideStringInterpolation'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SpecialGlobalVars'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/StabbyLambdaParentheses'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/StringLiterals'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/StringLiteralsInInterpolation'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/StringMethods'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/StructInheritance'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SymbolArray'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SymbolLiteral'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/SymbolProc'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/Tab'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/TrailingBlankLines'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/TrailingComma'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/TrailingWhitespace'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/TrivialAccessors'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/UnlessElse'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/UnneededCapitalW'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/UnneededPercentQ'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/TrailingUnderscoreVariable'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/VariableInterpolation'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/VariableName'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/WhenThen'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/WhileUntilDo'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/WhileUntilModifier'/>
    <testcase classname='lib.shared_concerns.methods' name='Style/WordArray'/>
    <testcase classname='lib.shared_concerns.methods' name='Rails/ActionFilter'/>
    <testcase classname='lib.shared_concerns.methods' name='Rails/Date'/>
    <testcase classname='lib.shared_concerns.methods' name='Rails/DefaultScope'/>
    <testcase classname='lib.shared_concerns.methods' name='Rails/Delegate'/>
    <testcase classname='lib.shared_concerns.methods' name='Rails/FindBy'/>
    <testcase classname='lib.shared_concerns.methods' name='Rails/FindEach'/>
    <testcase classname='lib.shared_concerns.methods' name='Rails/HasAndBelongsToMany'/>
    <testcase classname='lib.shared_concerns.methods' name='Rails/Output'/>
    <testcase classname='lib.shared_concerns.methods' name='Rails/PluralizationGrammar'/>
    <testcase classname='lib.shared_concerns.methods' name='Rails/ReadWriteAttribute'/>
    <testcase classname='lib.shared_concerns.methods' name='Rails/ScopeArgs'/>
    <testcase classname='lib.shared_concerns.methods' name='Rails/TimeZone'/>
    <testcase classname='lib.shared_concerns.methods' name='Rails/Validation'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/AmbiguousOperator'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/AmbiguousRegexpLiteral'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/AssignmentInCondition'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/BlockAlignment'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/CircularArgumentReference'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/ConditionPosition'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/Debugger'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/DefEndAlignment'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/DeprecatedClassMethods'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/DuplicateMethods'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/DuplicatedKey'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/EachWithObjectArgument'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/ElseLayout'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/EmptyEnsure'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/EmptyInterpolation'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/EndAlignment'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/EndInMethod'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/EnsureReturn'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/Eval'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/FormatParameterMismatch'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/HandleExceptions'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/InvalidCharacterLiteral'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/LiteralInCondition'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/LiteralInInterpolation'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/Loop'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/NestedMethodDefinition'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/NonLocalExitFromIterator'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/ParenthesesAsGroupedExpression'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/RequireParentheses'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/RescueException'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/ShadowingOuterLocalVariable'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/SpaceBeforeFirstArg'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/StringConversionInInterpolation'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/UnderscorePrefixedVariableName'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/UnneededDisable'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/UnreachableCode'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/UnusedBlockArgument'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/UnusedMethodArgument'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/UselessAccessModifier'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/UselessAssignment'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/UselessComparison'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/UselessElseWithoutRescue'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/UselessSetterCall'/>
    <testcase classname='lib.shared_concerns.properties' name='Lint/Void'/>
    <testcase classname='lib.shared_concerns.properties' name='Metrics/BlockNesting'/>
    <testcase classname='lib.shared_concerns.properties' name='Metrics/ClassLength'/>
    <testcase classname='lib.shared_concerns.properties' name='Metrics/ModuleLength'/>
    <testcase classname='lib.shared_concerns.properties' name='Metrics/CyclomaticComplexity'/>
    <testcase classname='lib.shared_concerns.properties' name='Metrics/AbcSize'/>
    <testcase classname='lib.shared_concerns.properties' name='Metrics/LineLength'/>
    <testcase classname='lib.shared_concerns.properties' name='Metrics/MethodLength'/>
    <testcase classname='lib.shared_concerns.properties' name='Metrics/ParameterLists'/>
    <testcase classname='lib.shared_concerns.properties' name='Metrics/PerceivedComplexity'/>
    <testcase classname='lib.shared_concerns.properties' name='Performance/CaseWhenSplat'/>
    <testcase classname='lib.shared_concerns.properties' name='Performance/Count'/>
    <testcase classname='lib.shared_concerns.properties' name='Performance/Detect'/>
    <testcase classname='lib.shared_concerns.properties' name='Performance/FixedSize'/>
    <testcase classname='lib.shared_concerns.properties' name='Performance/FlatMap'/>
    <testcase classname='lib.shared_concerns.properties' name='Performance/ReverseEach'/>
    <testcase classname='lib.shared_concerns.properties' name='Performance/Sample'/>
    <testcase classname='lib.shared_concerns.properties' name='Performance/Size'/>
    <testcase classname='lib.shared_concerns.properties' name='Performance/StringReplacement'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/AccessModifierIndentation'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/AccessorMethodName'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/Alias'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/AlignArray'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/AlignHash'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/AlignParameters'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/AndOr'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/ArrayJoin'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/AsciiComments'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/AsciiIdentifiers'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/Attr'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/AutoResourceCleanup'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/BarePercentLiterals'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/BeginBlock'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/BlockComments'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/BlockEndNewline'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/BlockDelimiters'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/BracesAroundHashParameters'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/CaseEquality'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/CaseIndentation'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/CharacterLiteral'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/ClassAndModuleCamelCase'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/ClassAndModuleChildren'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/ClassCheck'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/ClassMethods'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/ClassVars'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/ClosingParenthesisIndentation'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/CollectionMethods'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/ColonMethodCall'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/CommandLiteral'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/CommentAnnotation'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/CommentIndentation'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/Copyright'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/ConstantName'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/DefWithParentheses'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/DeprecatedHashMethods'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/Documentation'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/DotPosition'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/DoubleNegation'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/EachWithObject'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/ElseAlignment'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/EmptyElse'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/MissingElse'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/EmptyLineBetweenDefs'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/EmptyLines'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/EmptyLinesAroundAccessModifier'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/EmptyLinesAroundBlockBody'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/EmptyLinesAroundClassBody'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/EmptyLinesAroundMethodBody'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/EmptyLinesAroundModuleBody'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/EmptyLiteral'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/Encoding'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/EndBlock'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/EndOfLine'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/EvenOdd'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/ExtraSpacing'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/FileName'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/FirstArrayElementLineBreak'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/FirstHashElementLineBreak'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/FirstMethodArgumentLineBreak'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/FirstMethodParameterLineBreak'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/FirstParameterIndentation'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/FlipFlop'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/For'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/FormatString'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/GlobalVars'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/GuardClause'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/HashSyntax'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/IfUnlessModifier'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/IfWithSemicolon'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/IndentArray'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/IndentHash'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/IndentationConsistency'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/IndentationWidth'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/InfiniteLoop'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/InitialIndentation'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/InlineComment'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/Lambda'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/LambdaCall'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/LeadingCommentSpace'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/LineEndConcatenation'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/MethodCallParentheses'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/MethodCalledOnDoEndBlock'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/MethodDefParentheses'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/MethodName'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/ModuleFunction'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/MultilineBlockChain'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/MultilineBlockLayout'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/MultilineIfThen'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/MultilineOperationIndentation'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/MultilineTernaryOperator'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/MutableConstant'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/NegatedIf'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/NegatedWhile'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/NestedModifier'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/NestedTernaryOperator'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/Next'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/NilComparison'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/NonNilCheck'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/Not'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/NumericLiterals'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/OneLineConditional'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/OpMethod'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/OptionalArguments'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/OptionHash'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/ParallelAssignment'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/ParenthesesAroundCondition'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/PercentLiteralDelimiters'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/PercentQLiterals'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/PerlBackrefs'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/PredicateName'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/Proc'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/RaiseArgs'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/RedundantBegin'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/RedundantException'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/RedundantFreeze'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/RedundantReturn'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/RedundantSelf'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/RegexpLiteral'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/RescueEnsureAlignment'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/RescueModifier'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SelfAssignment'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/Semicolon'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/Send'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SignalException'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SingleLineBlockParams'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SingleLineMethods'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SingleSpaceBeforeFirstArg'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SpaceAfterColon'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SpaceAfterComma'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SpaceAfterControlKeyword'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SpaceAfterMethodName'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SpaceAfterNot'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SpaceAfterSemicolon'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SpaceAroundBlockParameters'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SpaceAroundEqualsInParameterDefault'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SpaceAroundOperators'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SpaceBeforeBlockBraces'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SpaceBeforeComma'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SpaceBeforeComment'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SpaceBeforeModifierKeyword'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SpaceBeforeSemicolon'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SpaceInsideBlockBraces'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SpaceInsideBrackets'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SpaceInsideHashLiteralBraces'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SpaceInsideParens'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SpaceInsideRangeLiteral'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SpaceInsideStringInterpolation'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SpecialGlobalVars'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/StabbyLambdaParentheses'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/StringLiterals'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/StringLiteralsInInterpolation'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/StringMethods'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/StructInheritance'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SymbolArray'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SymbolLiteral'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/SymbolProc'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/Tab'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/TrailingBlankLines'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/TrailingComma'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/TrailingWhitespace'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/TrivialAccessors'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/UnlessElse'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/UnneededCapitalW'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/UnneededPercentQ'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/TrailingUnderscoreVariable'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/VariableInterpolation'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/VariableName'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/WhenThen'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/WhileUntilDo'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/WhileUntilModifier'/>
    <testcase classname='lib.shared_concerns.properties' name='Style/WordArray'/>
    <testcase classname='lib.shared_concerns.properties' name='Rails/ActionFilter'/>
    <testcase classname='lib.shared_concerns.properties' name='Rails/Date'/>
    <testcase classname='lib.shared_concerns.properties' name='Rails/DefaultScope'/>
    <testcase classname='lib.shared_concerns.properties' name='Rails/Delegate'/>
    <testcase classname='lib.shared_concerns.properties' name='Rails/FindBy'/>
    <testcase classname='lib.shared_concerns.properties' name='Rails/FindEach'/>
    <testcase classname='lib.shared_concerns.properties' name='Rails/HasAndBelongsToMany'/>
    <testcase classname='lib.shared_concerns.properties' name='Rails/Output'/>
    <testcase classname='lib.shared_concerns.properties' name='Rails/PluralizationGrammar'/>
    <testcase classname='lib.shared_concerns.properties' name='Rails/ReadWriteAttribute'/>
    <testcase classname='lib.shared_concerns.properties' name='Rails/ScopeArgs'/>
    <testcase classname='lib.shared_concerns.properties' name='Rails/TimeZone'/>
    <testcase classname='lib.shared_concerns.properties' name='Rails/Validation'/>
  </testsuite>
</testsuites>